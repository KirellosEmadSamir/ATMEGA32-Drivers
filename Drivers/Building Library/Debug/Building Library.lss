
Building Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000614  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b8  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fb  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0a  00000000  00000000  000023cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000821  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 08 03 	jmp	0x610	; 0x610 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
    /* Replace with your application code */
	
	LCD_Init();
  82:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_Init>
	Temp_Sensor_Init();
  86:	0e 94 97 01 	call	0x32e	; 0x32e <Temp_Sensor_Init>
	Uint16t temp=0;
    while (1) 
    {
		
		LCD_Write_Command(0x80);
  8a:	80 e8       	ldi	r24, 0x80	; 128
  8c:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
		LCD_Write_String("Temperature =");
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Write_String>
		LCD_Write_Command(0xc0);
  98:	80 ec       	ldi	r24, 0xC0	; 192
  9a:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
		
		temp=Temp_Sensor_Read();
  9e:	0e 94 9a 01 	call	0x334	; 0x334 <Temp_Sensor_Read>
		LCD_Write_Number(temp);
  a2:	bc 01       	movw	r22, r24
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Write_Number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3a>
  bc:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
  be:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_Clear>
  c2:	e3 cf       	rjmp	.-58     	; 0x8a <main+0x8>

000000c4 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	/*Define Vref for ADC, as AVCC*/
	SET_BIT(ADMUX, REFS0);
  c4:	87 b1       	in	r24, 0x07	; 7
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, REFS1);
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	87 b9       	out	0x07, r24	; 7
	/*Right Adjust*/
	CLR_BIT(ADMUX, ADLAR);
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	87 b9       	out	0x07, r24	; 7
	/*Choose channel*/
	CLR_BIT(ADMUX, MUX0);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX1);
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX2);
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX3);
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX, MUX4);
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	87 b9       	out	0x07, r24	; 7
	/*Auto Trigger Mode*/
	SET_BIT(ADCSRA, ADATE);
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	86 b9       	out	0x06, r24	; 6
	/*Define Prescalar*/
	SET_BIT(ADCSRA, ADPS0);
  fa:	86 b1       	in	r24, 0x06	; 6
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS1);
 100:	86 b1       	in	r24, 0x06	; 6
 102:	82 60       	ori	r24, 0x02	; 2
 104:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA, ADPS2);
 106:	86 b1       	in	r24, 0x06	; 6
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	86 b9       	out	0x06, r24	; 6
	/*Enable ADC*/
	SET_BIT(ADCSRA, ADEN);
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	86 b9       	out	0x06, r24	; 6
 112:	08 95       	ret

00000114 <ADC_Read>:
}
Uint16t ADC_Read(void)
{
	Uint16t var = 0;
	/*Start Conversion*/
	SET_BIT(ADCSRA, ADSC);
 114:	86 b1       	in	r24, 0x06	; 6
 116:	80 64       	ori	r24, 0x40	; 64
 118:	86 b9       	out	0x06, r24	; 6
	/*Wait and check till flag is one, Polling*/
	while(GET_BIT(ADCSRA, ADIF) != 1);
 11a:	34 9b       	sbis	0x06, 4	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <ADC_Read+0x6>
	/*Return value*/
	var = ADC_DTA;
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	95 b1       	in	r25, 0x05	; 5
	return var;
 122:	08 95       	ret

00000124 <LCD_Write_Command>:
	#else
	#warning "Wrong Mode"
	#endif
}
void LCD_Write_Command(Uint8t command)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_LOW);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	9c 2f       	mov	r25, r28
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Write_Command+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Write_Command+0x42>
 166:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command  << 4) | (PORTA & 0x0F);
 172:	20 e1       	ldi	r18, 0x10	; 16
 174:	c2 9f       	mul	r28, r18
 176:	c0 01       	movw	r24, r0
 178:	11 24       	eor	r1, r1
 17a:	9b b3       	in	r25, 0x1b	; 27
 17c:	9f 70       	andi	r25, 0x0F	; 15
 17e:	89 2b       	or	r24, r25
 180:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 18c:	8f e9       	ldi	r24, 0x9F	; 159
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_Write_Command+0x6c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Write_Command+0x72>
 196:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Write_Command+0x82>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Write_Command+0x88>
 1ac:	00 00       	nop
	_delay_ms(5);
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	#if LCD_Mode == 4
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RS, LCD_OUTPUT);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RW, LCD_OUTPUT);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_EN, LCD_OUTPUT);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA4, LCD_OUTPUT);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA5, LCD_OUTPUT);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	65 e0       	ldi	r22, 0x05	; 5
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA6, LCD_OUTPUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	66 e0       	ldi	r22, 0x06	; 6
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA7, LCD_OUTPUT);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_SetPin_Direction>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	81 ee       	ldi	r24, 0xE1	; 225
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <LCD_Init+0x4c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_Init+0x56>
 208:	00 00       	nop
	_delay_ms(100);
	LCD_Write_Command(0x02);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x33);
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x28);
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x01);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	LCD_Write_Command(0x06);
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 234:	08 95       	ret

00000236 <LCD_Write_Data>:
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
	_delay_ms(5);
}
void LCD_Write_Data(Uint8t data)
{
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	63 e0       	ldi	r22, 0x03	; 3
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data & 0xF0) | (PORTA & 0x0F);
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	9c 2f       	mov	r25, r28
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	89 2b       	or	r24, r25
 262:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 26e:	8f e9       	ldi	r24, 0x9F	; 159
 270:	9f e0       	ldi	r25, 0x0F	; 15
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Write_Data+0x3c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Write_Data+0x42>
 278:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data << 4) | (PORTA & 0x0F);
 284:	20 e1       	ldi	r18, 0x10	; 16
 286:	c2 9f       	mul	r28, r18
 288:	c0 01       	movw	r24, r0
 28a:	11 24       	eor	r1, r1
 28c:	9b b3       	in	r25, 0x1b	; 27
 28e:	9f 70       	andi	r25, 0x0F	; 15
 290:	89 2b       	or	r24, r25
 292:	8b bb       	out	0x1b, r24	; 27
	//PORTA = (data & 0xF0) | (PORTA & 0x0F);
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 29e:	8f e9       	ldi	r24, 0x9F	; 159
 2a0:	9f e0       	ldi	r25, 0x0F	; 15
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_Write_Data+0x6c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_Write_Data+0x72>
 2a8:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_SetPin_Value>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	9e e4       	ldi	r25, 0x4E	; 78
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_Write_Data+0x82>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_Write_Data+0x88>
 2be:	00 00       	nop
	_delay_ms(5);
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 2ca:	08 95       	ret

000002cc <LCD_Write_String>:
}
void LCD_Write_String(Uint8t* str)/**/
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <LCD_Write_String+0x1a>
 2d4:	8f e9       	ldi	r24, 0x9F	; 159
 2d6:	9f e0       	ldi	r25, 0x0F	; 15
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_Write_String+0xc>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_Write_String+0x12>
 2de:	00 00       	nop
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
 2e0:	89 91       	ld	r24, Y+
 2e2:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_Write_Data>
{
	LCD_Write_Command(0x01);
}
void LCD_Write_String(Uint8t* str)/**/
{
	while(*str != '\0')
 2e6:	88 81       	ld	r24, Y
 2e8:	81 11       	cpse	r24, r1
 2ea:	f4 cf       	rjmp	.-24     	; 0x2d4 <LCD_Write_String+0x8>
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
		str++;
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)/**/
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	2a 97       	sbiw	r28, 0x0a	; 10
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	//itoa(number,(char*)num,10);//Integer
	ltoa(number,(Uint8t*)num,10);//Number need to print, Empty character string to fill with numbers, enter base needed, Long
 306:	2a e0       	ldi	r18, 0x0A	; 10
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	ae 01       	movw	r20, r28
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	0e 94 bc 02 	call	0x578	; 0x578 <ltoa>
	LCD_Write_String(num);
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Write_String>
 31c:	2a 96       	adiw	r28, 0x0a	; 10
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <Temp_Sensor_Init>:
 */ 
#include "Temp_Sensor.h"

void Temp_Sensor_Init(void)
{
	ADC_Init();
 32e:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_Init>
 332:	08 95       	ret

00000334 <Temp_Sensor_Read>:
}

Uint16t Temp_Sensor_Read(void)
{
	Uint16t adc_reading=ADC_Read();
 334:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_Read>
	Uint16t temp=((Uint32t)adc_reading*500)/1023;
 338:	9c 01       	movw	r18, r24
 33a:	a4 ef       	ldi	r26, 0xF4	; 244
 33c:	b1 e0       	ldi	r27, 0x01	; 1
 33e:	0e 94 ad 02 	call	0x55a	; 0x55a <__umulhisi3>
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	33 e0       	ldi	r19, 0x03	; 3
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodsi4>
	
	return temp;
 34e:	c9 01       	movw	r24, r18
 350:	08 95       	ret

00000352 <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
 352:	44 23       	and	r20, r20
 354:	19 f0       	breq	.+6      	; 0x35c <DIO_SetPin_Direction+0xa>
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	c9 f1       	breq	.+114    	; 0x3cc <DIO_SetPin_Direction+0x7a>
 35a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 f0       	breq	.+36     	; 0x384 <DIO_SetPin_Direction+0x32>
 360:	28 f0       	brcs	.+10     	; 0x36c <DIO_SetPin_Direction+0x1a>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	d9 f0       	breq	.+54     	; 0x39c <DIO_SetPin_Direction+0x4a>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	29 f1       	breq	.+74     	; 0x3b4 <DIO_SetPin_Direction+0x62>
 36a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 36c:	2a b3       	in	r18, 0x1a	; 26
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_SetPin_Direction+0x26>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_SetPin_Direction+0x22>
 37c:	80 95       	com	r24
 37e:	82 23       	and	r24, r18
 380:	8a bb       	out	0x1a, r24	; 26
			break;
 382:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 384:	27 b3       	in	r18, 0x17	; 23
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_SetPin_Direction+0x3e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_SetPin_Direction+0x3a>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	87 bb       	out	0x17, r24	; 23
			break;
 39a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 39c:	24 b3       	in	r18, 0x14	; 20
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_SetPin_Direction+0x56>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_SetPin_Direction+0x52>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	84 bb       	out	0x14, r24	; 20
			break;
 3b2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 3b4:	21 b3       	in	r18, 0x11	; 17
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPin_Direction+0x6e>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPin_Direction+0x6a>
 3c4:	80 95       	com	r24
 3c6:	82 23       	and	r24, r18
 3c8:	81 bb       	out	0x11, r24	; 17
			break;
 3ca:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	89 f0       	breq	.+34     	; 0x3f2 <DIO_SetPin_Direction+0xa0>
 3d0:	28 f0       	brcs	.+10     	; 0x3dc <DIO_SetPin_Direction+0x8a>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	c9 f0       	breq	.+50     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	11 f1       	breq	.+68     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3da:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 3dc:	2a b3       	in	r18, 0x1a	; 26
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_SetPin_Direction+0x96>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_SetPin_Direction+0x92>
 3ec:	82 2b       	or	r24, r18
 3ee:	8a bb       	out	0x1a, r24	; 26
			break;
 3f0:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 3f2:	27 b3       	in	r18, 0x17	; 23
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_SetPin_Direction+0xac>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_SetPin_Direction+0xa8>
 402:	82 2b       	or	r24, r18
 404:	87 bb       	out	0x17, r24	; 23
			break;
 406:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 408:	24 b3       	in	r18, 0x14	; 20
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	82 2b       	or	r24, r18
 41a:	84 bb       	out	0x14, r24	; 20
			break;
 41c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 41e:	21 b3       	in	r18, 0x11	; 17
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	81 bb       	out	0x11, r24	; 17
 432:	08 95       	ret

00000434 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
 434:	44 23       	and	r20, r20
 436:	19 f0       	breq	.+6      	; 0x43e <DIO_SetPin_Value+0xa>
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	c9 f1       	breq	.+114    	; 0x4ae <DIO_SetPin_Value+0x7a>
 43c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <DIO_SetPin_Value+0x32>
 442:	28 f0       	brcs	.+10     	; 0x44e <DIO_SetPin_Value+0x1a>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	d9 f0       	breq	.+54     	; 0x47e <DIO_SetPin_Value+0x4a>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	29 f1       	breq	.+74     	; 0x496 <DIO_SetPin_Value+0x62>
 44c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_SetPin_Value+0x26>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_SetPin_Value+0x22>
 45e:	80 95       	com	r24
 460:	82 23       	and	r24, r18
 462:	8b bb       	out	0x1b, r24	; 27
			break;
 464:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 466:	28 b3       	in	r18, 0x18	; 24
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_SetPin_Value+0x3e>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_SetPin_Value+0x3a>
 476:	80 95       	com	r24
 478:	82 23       	and	r24, r18
 47a:	88 bb       	out	0x18, r24	; 24
			break;
 47c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 47e:	25 b3       	in	r18, 0x15	; 21
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_SetPin_Value+0x56>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_SetPin_Value+0x52>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	85 bb       	out	0x15, r24	; 21
			break;
 494:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 496:	22 b3       	in	r18, 0x12	; 18
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_SetPin_Value+0x6e>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_SetPin_Value+0x6a>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	82 bb       	out	0x12, r24	; 18
			break;
 4ac:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	89 f0       	breq	.+34     	; 0x4d4 <DIO_SetPin_Value+0xa0>
 4b2:	28 f0       	brcs	.+10     	; 0x4be <DIO_SetPin_Value+0x8a>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	c9 f0       	breq	.+50     	; 0x4ea <DIO_SetPin_Value+0xb6>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	11 f1       	breq	.+68     	; 0x500 <DIO_SetPin_Value+0xcc>
 4bc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 4be:	2b b3       	in	r18, 0x1b	; 27
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_SetPin_Value+0x96>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_SetPin_Value+0x92>
 4ce:	82 2b       	or	r24, r18
 4d0:	8b bb       	out	0x1b, r24	; 27
			break;
 4d2:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 4d4:	28 b3       	in	r18, 0x18	; 24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_SetPin_Value+0xac>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_SetPin_Value+0xa8>
 4e4:	82 2b       	or	r24, r18
 4e6:	88 bb       	out	0x18, r24	; 24
			break;
 4e8:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 4ea:	25 b3       	in	r18, 0x15	; 21
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_SetPin_Value+0xc2>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_SetPin_Value+0xbe>
 4fa:	82 2b       	or	r24, r18
 4fc:	85 bb       	out	0x15, r24	; 21
			break;
 4fe:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 500:	22 b3       	in	r18, 0x12	; 18
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_SetPin_Value+0xd8>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_SetPin_Value+0xd4>
 510:	82 2b       	or	r24, r18
 512:	82 bb       	out	0x12, r24	; 18
 514:	08 95       	ret

00000516 <__udivmodsi4>:
 516:	a1 e2       	ldi	r26, 0x21	; 33
 518:	1a 2e       	mov	r1, r26
 51a:	aa 1b       	sub	r26, r26
 51c:	bb 1b       	sub	r27, r27
 51e:	fd 01       	movw	r30, r26
 520:	0d c0       	rjmp	.+26     	; 0x53c <__udivmodsi4_ep>

00000522 <__udivmodsi4_loop>:
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	ee 1f       	adc	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	a2 17       	cp	r26, r18
 52c:	b3 07       	cpc	r27, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	20 f0       	brcs	.+8      	; 0x53c <__udivmodsi4_ep>
 534:	a2 1b       	sub	r26, r18
 536:	b3 0b       	sbc	r27, r19
 538:	e4 0b       	sbc	r30, r20
 53a:	f5 0b       	sbc	r31, r21

0000053c <__udivmodsi4_ep>:
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	1a 94       	dec	r1
 546:	69 f7       	brne	.-38     	; 0x522 <__udivmodsi4_loop>
 548:	60 95       	com	r22
 54a:	70 95       	com	r23
 54c:	80 95       	com	r24
 54e:	90 95       	com	r25
 550:	9b 01       	movw	r18, r22
 552:	ac 01       	movw	r20, r24
 554:	bd 01       	movw	r22, r26
 556:	cf 01       	movw	r24, r30
 558:	08 95       	ret

0000055a <__umulhisi3>:
 55a:	a2 9f       	mul	r26, r18
 55c:	b0 01       	movw	r22, r0
 55e:	b3 9f       	mul	r27, r19
 560:	c0 01       	movw	r24, r0
 562:	a3 9f       	mul	r26, r19
 564:	70 0d       	add	r23, r0
 566:	81 1d       	adc	r24, r1
 568:	11 24       	eor	r1, r1
 56a:	91 1d       	adc	r25, r1
 56c:	b2 9f       	mul	r27, r18
 56e:	70 0d       	add	r23, r0
 570:	81 1d       	adc	r24, r1
 572:	11 24       	eor	r1, r1
 574:	91 1d       	adc	r25, r1
 576:	08 95       	ret

00000578 <ltoa>:
 578:	25 32       	cpi	r18, 0x25	; 37
 57a:	31 05       	cpc	r19, r1
 57c:	20 f4       	brcc	.+8      	; 0x586 <ltoa+0xe>
 57e:	22 30       	cpi	r18, 0x02	; 2
 580:	10 f0       	brcs	.+4      	; 0x586 <ltoa+0xe>
 582:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__ltoa_ncheck>
 586:	fa 01       	movw	r30, r20
 588:	10 82       	st	Z, r1
 58a:	ca 01       	movw	r24, r20
 58c:	08 95       	ret

0000058e <__ltoa_ncheck>:
 58e:	bb 27       	eor	r27, r27
 590:	2a 30       	cpi	r18, 0x0A	; 10
 592:	51 f4       	brne	.+20     	; 0x5a8 <__ltoa_ncheck+0x1a>
 594:	99 23       	and	r25, r25
 596:	42 f4       	brpl	.+16     	; 0x5a8 <__ltoa_ncheck+0x1a>
 598:	bd e2       	ldi	r27, 0x2D	; 45
 59a:	90 95       	com	r25
 59c:	80 95       	com	r24
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__ultoa_common>

000005ac <__ultoa_ncheck>:
 5ac:	bb 27       	eor	r27, r27

000005ae <__ultoa_common>:
 5ae:	fa 01       	movw	r30, r20
 5b0:	a6 2f       	mov	r26, r22
 5b2:	62 17       	cp	r22, r18
 5b4:	71 05       	cpc	r23, r1
 5b6:	81 05       	cpc	r24, r1
 5b8:	91 05       	cpc	r25, r1
 5ba:	33 0b       	sbc	r19, r19
 5bc:	30 fb       	bst	r19, 0
 5be:	66 f0       	brts	.+24     	; 0x5d8 <__ultoa_common+0x2a>
 5c0:	aa 27       	eor	r26, r26
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	aa 1f       	adc	r26, r26
 5cc:	a2 17       	cp	r26, r18
 5ce:	10 f0       	brcs	.+4      	; 0x5d4 <__ultoa_common+0x26>
 5d0:	a2 1b       	sub	r26, r18
 5d2:	63 95       	inc	r22
 5d4:	38 50       	subi	r19, 0x08	; 8
 5d6:	a9 f7       	brne	.-22     	; 0x5c2 <__ultoa_common+0x14>
 5d8:	a0 5d       	subi	r26, 0xD0	; 208
 5da:	aa 33       	cpi	r26, 0x3A	; 58
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <__ultoa_common+0x32>
 5de:	a9 5d       	subi	r26, 0xD9	; 217
 5e0:	a1 93       	st	Z+, r26
 5e2:	36 f7       	brtc	.-52     	; 0x5b0 <__ultoa_common+0x2>
 5e4:	b1 11       	cpse	r27, r1
 5e6:	b1 93       	st	Z+, r27
 5e8:	10 82       	st	Z, r1
 5ea:	ca 01       	movw	r24, r20
 5ec:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <strrev>

000005f0 <strrev>:
 5f0:	dc 01       	movw	r26, r24
 5f2:	fc 01       	movw	r30, r24
 5f4:	67 2f       	mov	r22, r23
 5f6:	71 91       	ld	r23, Z+
 5f8:	77 23       	and	r23, r23
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <strrev+0x4>
 5fc:	32 97       	sbiw	r30, 0x02	; 2
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <strrev+0x18>
 600:	7c 91       	ld	r23, X
 602:	6d 93       	st	X+, r22
 604:	70 83       	st	Z, r23
 606:	62 91       	ld	r22, -Z
 608:	ae 17       	cp	r26, r30
 60a:	bf 07       	cpc	r27, r31
 60c:	c8 f3       	brcs	.-14     	; 0x600 <strrev+0x10>
 60e:	08 95       	ret

00000610 <_exit>:
 610:	f8 94       	cli

00000612 <__stop_program>:
 612:	ff cf       	rjmp	.-2      	; 0x612 <__stop_program>
